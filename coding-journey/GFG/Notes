Data: 26 april 2022

### Introductions ### 

1. Analysis of algorithm :
    -- The analysis of algorithm is to determined using the order of growth which program takes min time to execute.

    eg. sum of n natural numbers 
    1 + 2 + 3 + 4....n  = n*(n+1)/2

    eg2. fun(1) = 2n+4 , fun(2) = 5(
    so n = (5-4)/2 = 0.5 
    so if n < 0.5 fun(1) take less time but after 0.5 any value fun(2) takes less time.

2. Order of growth :
    -- A function f(n) is said to be growing faster than g(n) if =>
    -->  f(n) < g(n)

    --> limit n tense to infinity  f(n)/g(n) = infinity
    
    or 

    limit n tense to infinity  g(n)/f(n) = 0

    Order of growth trick:
    c < log*log(n) < log(n) < n(1/3) < n(1/2) < n < n^2 < n^3 < 2^n < 3^n < n^n

3. Asymptotic Notations :
    -- Any algorithm can we describe in three category
     -- best, average, worst case
    
    -- always any application thing about worst case scenario that in worst case how application perform.

    -- notations are Big O(upper bound), Theta(exact bound), Omega (lower bound)

4. analysis of common loops:
    e.g.1: 
    -- 2, 4, 8, 16, 32 ... 
    -- 1, c, c^2, c^3, c^5 ... c^(k-1)

    so   c^(k-1) < n  (apply log)
        k-1 < log n  (base c)
        k < log n + 1   so order O(log n)
    
    e.g.2:
    -- c=2, n=32
    -- 2, 2^2, (2^2)^2 ... 
    -- 2, 4, 16, 64
    -- 2, 2^c, (2^c)^2 .... (2^c)^(k-1)

    (2^c)^(k-1) < n   (both side log 2)
    c^(k-1) < log n   (both side log c)
    k-1 < log*log(n)
    so O(log*log(n)) 


5. Analysis of Recursion 
    -- In the Recursive call need to write Recursion relation . 
    eg: t(n) = 2t(n/2) + cn,  t(1)= c

    --- after that create recursion tree 
    eg: cn --> [t(n/2), t(n/2)] --> [cn/2, cn/2] --> [[t(n/4), t(n/4)],[t(n/4), t(n/4)]] .....
    so work done --> cn --> cn --> cn .....  (n common) [1,1,1,1....] ---> log(n)
    so its like height ---> 16 --> 8 --> 4 --> 2 --> 1 ---> n*log(n) [ans]

6. Space complexity:
    -- Order of growth of memory (or RAM) Space in terms of input size.

7. Auxiliary Space: 
    -- Order of growth of extra Space or temporary space in terms of input size.
    -- All the sorting algorithm takes O(n) space complexity. but Auxiliary space may different...
        eg. insertion sort, selection sort, bubble sort take O(1) Auxiliary space.
        eg. merge sort takes O(n) Auxiliary space. 
        eg. quick sort take O(log n) Auxiliary space.
    


Data: 30 april 2022

### Mathematics ### 

1. Find no of digits:
    -- divide by 10 and count until no not equal to zero;
    -- using recursion 1+rec(n/10)
    -- logarithmic floor(log10(n)+1) [countDigit.cpp]

2. Arithmetic and Geometric progressions

    -- 2,4,6,8,10....
    a = 2, d = 2 ---> [a, a+d, a+2d, a+3d .... a+(n-1)d]
    so formula : Sum of nth number = n/2( 2a + (n-1)d ) 

    -- 2, 4, 8, 16, 32....
    a = 2, r = 2 --> [a, ar, ar^2, ar^3 .... ar^(n-1)]
    so formula :  = a(r^n - 1) / (r-1)


3. Quadratic Equation:
    ax^2 + bx + c = 0
    
    check D = b^2 - 4ac   then formula => x = (-b +- sqrt(D)) / 2a
    D < 0, imaginary roots
    D = 0, to equal roots    
    D > 0, two distinct roots    

4. mean, median
    -- sum all digit and divide total num.
    -- median : the middle number: first sorted ascending then get middle one.. if two values then get both two and divide by 2.

5. Prime numbers : 2,3,5,7,11....  [test.cpp]
    -- Every Prime number can be represented in front of 6n+1 or 6n-1 except 2 and 3. where n is natural numbers.

6. Factors: 8 => 1,2,4,8  [test.cpp]
    --> all the no that divide a number completely i.e. without leaving any remainder, are called factors of that number.
    --> 1,2,4,8 is factors and 8 is called multiple of each those no.

7. LCM / HCF   [test.cpp]
    LCM : The least common multiple
        LCM --> 5 or 6 --> 30
    HCF : Highest common factor
        HCF --> 12 or 6 --> 6

8. Factorials:   [test.cpp]
    --> n!  --> 5! = 5*4*3*2*1 = 120; and 0!= 1;

9. Permutation & Combination :
     -- Permutation --> arrangement thing is important
     formula --> nPr --> n!/ (n-r)!
     -- Combination --> arrangement thing not important
     formula --> nPr --> n!/ r! * (n-r)!

10. Modular Arithmetic: "%"
    --> 10^7 --> in most cases
    --> 7%2 --> 1;

11. Segmented Sieve:   [Segmented_sieve.cpp]
     --> A space optimized variation of Sieve for handing the below cases:
            (1)--> n is very large (say 10^9)[isPrime[] would become very large]
            (2)--> we have a range [low, large] as input and high is very large(say 10^9)
        
        e.g: i/p --> l=2, h=10  o/p--> 2,3,5,7
             i/p --> l=6, h=10  o/p--> 7
            0<= l , h<=10^9
        
